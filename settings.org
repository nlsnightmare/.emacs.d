* Package Initialization
  #+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
  (package-initialize)
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (setq use-package-always-ensure t)
  #+END_SRC
* My functions
 #+BEGIN_SRC emacs-lisp
  (defun init.el ()
    "This function is used to open the file ~/.emacs.d/init.el faster."
    (interactive)
    (find-file "~/.emacs.d/settings.org"))
  (defun close-parenths ()
    "Closes the parenthesis of a function."
    (interactive)
    (insert "(  );")
    (backward-char 3))
  (defun move-line-up ()
    "Used to move a line up."
    (interactive)
    (transpose-lines 1)
    (forward-line -2))
  (defun move-line-down ()
    "Used to move line down."
    (interactive)
    (forward-line)
    (transpose-lines 1)
    (forward-line -1))
  (defun eval-and-replace ()
    "Replace the preceding sexp with its value."
    (interactive)
    (backward-kill-sexp)
    (condition-case nil
	(prin1 (eval (read (current-kill 0)))
	       (current-buffer))
      (error (message "Invalid expression")
	     (insert (current-kill 0)))))
  (defun my-insert-function ()
    "Insert a function template using yasnippet."
    (interactive)
    (yas-expand-snippet (yas-lookup-snippet "function") ))
 #+END_SRC
* Appearance
** Neotree
#+BEGIN_SRC emacs-lisp
(use-package neotree
  :config
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
  (setq neo-window-width 27))
#+END_SRC
** Nlinum
#+BEGIN_SRC emacs-lisp
(use-package nlinum
  :config
  (global-nlinum-mode t))
#+END_SRC
** Indent Guide
#+BEGIN_SRC emacs-lisp
  (use-package indent-guide
    :config
    (indent-guide-global-mode t)
    (setq indent-guide-char "|")
    (add-hook 'html-mode-hook 'indent-guide-mode nil)
    (setq indent-guide-recursive nil))
#+END_SRC
** IDO
#+BEGIN_SRC emacs-lisp
(use-package ido-vertical-mode
  :config
  (ido-mode 1)
  (ido-vertical-mode 1)
  (setq ido-everywhere t)
  ;;enable ido m-x
  (global-set-key
   "\M-x"
   (lambda ()
     (interactive)
     (call-interactively
(intern
 (ido-completing-read
  "M-x "
  (all-completions "" obarray 'commandp))))))
   (setq ido-vertical-define-keys 'c-n-and-c-p-only))
#+END_SRC
** Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook))
#+END_SRC
** Rainbow Delimeters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :config
  (add-hook 'prog-mode-hook
     (lambda ()
     (rainbow-delimiters-mode t))))
#+END_SRC
   
** Highlight Todo 
#+BEGIN_SRC emacs-lisp
(use-package hl-todo
  :init
  (global-hl-todo-mode t))
#+END_SRC
** Misc
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq frame-title-format (list "%b%* %m, emacs@" (getenv "COMPUTERNAME") ))
  (set-language-environment "UTF-8")
  (toggle-frame-maximized)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (electric-pair-mode t)
  (set-default 'truncate-lines t)
  (add-hook 'prog-mode-hook 'hs-minor-mode)
  (setq org-log-done t)
  (set-face-attribute 'default nil :height 105)
  (global-hl-line-mode)
  (setq default-directory "~/Documents")
  (use-package all-the-icons)
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
(use-package atom-one-dark-theme 
  :init
  (load-theme 'atom-one-dark))
(use-package powerline
  :config
  (powerline-center-evil-theme))
(use-package airline-themes
  :config
  (load-theme 'airline-doom-one))
#+END_SRC

* Yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :init
  (yas-global-mode t)
  (add-hook 'term-mode-hook
	    (lambda() (setq yas-dont-activate-functions t))))
#+END_SRC

* Org Mode
** Main mode
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC
** Org-Bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :init
    (add-hook 'org-mode-hook 'org-bullets-mode))
#+END_SRC
* Evil mode
** Evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :config
    (evil-mode 1))
#+END_SRC
** Evil Surround
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :config
    (global-evil-surround-mode t))
#+END_SRC
** Evil Numbers
#+BEGIN_SRC emacs-lisp
  (use-package evil-numbers)
#+END_SRC
** Evil Visual Replace
#+BEGIN_SRC emacs-lisp
  (use-package evil-visual-replace
    :config
    (evil-visual-replace-visual-bindings))
#+END_SRC 
* Company Mode
** Main Package
#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (global-company-mode t)
    (setq company-minimum-prefix-length 0)
    (setq company-require-match nil)
    (setq company-idle-delay 0.0))
#+END_SRC

** Company Irony
#+BEGIN_SRC emacs-lisp
(use-package company-irony)
(add-to-list 'company-backends '(company-irony))
#+END_SRC
* Program Modes
** Flycheck
*** Main Package
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :init 
  (global-flycheck-mode)
  :config
  (setq flycheck-c/c++-clang-executable "/usr/bin/clang-5.0")
  (setq flycheck-gcc-language-standard "c++17")
  (setq irony-eldoc-use-unicode t))
#+END_SRC
*** Flycheck Irony
#+BEGIN_SRC emacs-lisp
(use-package flycheck-irony)
#+END_SRC
** C/C++
*** Indentation
#+BEGIN_SRC emacs-lisp
  (setq c-default-style "linux"
	c-basic-offset 4)
#+END_SRC
*** Hooks
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.ino\\'" . c++-mode))

  (add-hook 'c++-mode-hook (lambda () 
        (setq flycheck-clang-language-standard "c++1z")
        (irony-mode)
	(setq flycheck-clang-include-path
	          (list (expand-file-name "~/Documents/Arduino/libraries/")))))
  (add-hook 'c-mode-hook 'irony-mode)
  (add-hook 'objc-mode-hook 'irony-mode)
#+END_SRC
*** Irony Mode
#+BEGIN_SRC emacs-lisp
(use-package irony
  :hook (irony-eldoc))

(setq company-clang-executable "/usr/bin/clang-5.0")
(use-package irony-eldoc)
(use-package company-c-headers 
  :config 
    (add-to-list 'company-backends 'company-c-headers))

#+END_SRC
** Lua
#+BEGIN_SRC emacs-lisp
  (use-package lua-mode)
  (use-package company-lua)
#+END_SRC
** Web
*** Web mode
#+BEGIN_SRC emacs-lisp
(use-package web-mode
   :init
   (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
   (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
   (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
   (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
   (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
   (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
   (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
   (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
   (defun my-web-mode-hook ()
     "Hooks for Web mode."
     (electric-indent-mode nil)
     (setq web-mode-markup-indent-offset 2))  
   (add-hook 'web-mode-hook  'my-web-mode-hook))
#+END_SRC
*** Emmet mode
#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
    :config
    (add-hook 'sgml-mode-hook 'emmet-mode)
    (add-hook 'web-mode-hook 'emmet-mode)
    (setq emmet-move-cursor-between-quotes t)
    (add-hook 'css-mode-hook  'emmet-mode))
#+END_SRC
*** Javascript
#+BEGIN_SRC emacs-lisp
(use-package tern)
(use-package company-tern)
(use-package js2-mode
  :mode "\\.js\\'"
  :init
  (add-hook 'js2-mode-hook '(lambda ()
    (tern-mode)  
    (add-to-list 'company-backends 'company-tern))))
#+END_SRC

** Python
#+BEGIN_SRC emacs-lisp
(use-package elpy
  :init (elpy-enable))

#+END_SRC
* Keybindings
** Evil mode
#+BEGIN_SRC emacs-lisp
    (define-key evil-normal-state-map "K" 'move-line-up)
    (define-key evil-normal-state-map "J" 'move-line-down)

    (define-key evil-normal-state-map (kbd "C-b") 'ido-switch-buffer)
    (define-key evil-emacs-state-map (kbd "C-b") 'ido-switch-buffer)
    (define-key evil-motion-state-map (kbd "C-b") 'ido-switch-buffer)

    (define-key evil-normal-state-map (kbd "C-e") 'find-file)
    (define-key    evil-emacs-state-map (kbd "C-e") 'find-file)
    (define-key evil-motion-state-map (kbd "C-e") 'find-file)
    (evil-define-key 'insert emmet-mode-keymap (kbd "tab") 'emmet-expand-line)
    (global-set-key [f8] 'neotree-toggle)
#+END_SRC
** Neotree
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal neotree-mode-map (kbd "tab") 'neotree-enter)
  (evil-define-key 'normal neotree-mode-map (kbd "r"  ) 'neotree-refresh)
  (evil-define-key 'normal neotree-mode-map (kbd "d"  ) 'neotree-delete-node)
  (evil-define-key 'normal neotree-mode-map (kbd "c"  ) 'neotree-create-node)
  (evil-define-key 'normal neotree-mode-map (kbd "spc") 'neotree-enter)
  (evil-define-key 'normal neotree-mode-map (kbd "l"  ) 'neotree-enter)
  (evil-define-key 'normal neotree-mode-map (kbd "o"  ) 'neotree-change-root)
  (evil-define-key 'normal neotree-mode-map (kbd "q"  ) 'neotree-hide)
  (evil-define-key 'normal neotree-mode-map (kbd "<return>") 'neotree-change-root)
#+END_SRC
#+END_SRC
** Evil Leader
#+BEGIN_SRC emacs-lisp
   (use-package evil-leader
    :config
    ;;example usage of leader key
    (global-evil-leader-mode)
    (evil-leader/set-leader "<SPC>")
    (evil-leader/set-key
     "g" 'google-this)
    (evil-leader/set-key
     "c" 'comment-line)
    (evil-leader/set-key-for-mode 'csharp-mode
				  "r" 'omnisharp-rename)
    (evil-leader/set-key-for-mode 'python-mode
				  "r" 'elpy-multiedit-python-symbol-at-point)
    (evil-leader/set-key
     "|" 'split-window-right)
    (evil-leader/set-key
     "-" 'split-window-below)
    (evil-leader/set-key
     "/" 'comment-region)
    (evil-leader/set-key
     "k" 'delete-window)
    (evil-leader/set-key
     "s" 'avy-goto-char)
    (evil-leader/set-key
     "i" 'evil-numbers/inc-at-pt)
    (evil-leader/set-key
     "d" 'evil-numbers/dec-at-pt)
    (evil-leader/set-key
     "f" 'my-insert-function)
    (evil-leader/set-key
     "l" 'flycheck-list-errors)
    (evil-leader/set-key-for-mode 'glsl-mode
				  "h" 'ff-find-other-file)
    (evil-leader/set-key-for-mode 'c++-mode
				  "h" 'ff-find-other-file)
    (evil-leader/set-key
     "e" 'eval-and-replace)
    (evil-leader/set-key-for-mode 'js2-mode
				  "e" 'nodejs-repl-send-region)
    (evil-leader/set-key-for-mode 'python-mode
				  "e" 'elpy-shell-send-region-or-buffer)
    (evil-leader/set-key
     "q" 'server-edit)
    (evil-leader/set-key-for-mode 'csharp-mode
				  "p" 'maybe-start-omnisharp)
    (evil-leader/set-key
     "x" 'xkcd-rand))
#+END_SRC
** Refresh buffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f5>") 'revert-buffer)
#+END_SRC
** Change window with ctrl-tab
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
	  '(lambda ()
	     (define-key org-mode-map [(control tab)] nil)))
  (global-set-key (kbd "C-<tab>") 'other-window)
#+END_SRC
  
** KeyChord
#+BEGIN_SRC emacs-lisp
  (use-package key-chord
    :config
    (key-chord-mode 1)
    (key-chord-define elpy-mode-map "gd" 'elpy-goto-definitionk)
    (key-chord-define evil-insert-state-map  "kj" 'evil-normal-state))
#+END_SRC
** Company
#+BEGIN_SRC emacs-lisp
    (define-key evil-insert-state-map (kbd "C-SPC") 'company-complete)
    (define-key company-active-map (kbd "C-n") 'company-select-next-or-abort)
    (define-key company-active-map (kbd "C-p") 'company-select-previous-or-abort)
#+END_SRC
** Windmove
#+BEGIN_SRC emacs-lisp
  (windmove-default-keybindings 'meta)
#+END_SRC
* GDB
#+BEGIN_SRC emacs-lisp
 (setq gdb-enable-debug t)
 (setq gdb-many-windows t)
#+END_SRC
  
