* Package Initialization
Initialize package,use-package and add melpa and marmalade to our sources
#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
(package-initialize)
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+END_SRC

Make use-package download packages when not available

#+BEGIN_SRC emacs-lisp
(setq use-package-always-ensure t)
#+END_SRC

* Try packages
Try allows me to try a package and having it auto-delete when emacs closes
#+BEGIN_SRC emacs-lisp
(use-package try :ensure t)
#+END_SRC
* My functions
#+BEGIN_SRC emacs-lisp
  (defun init.el ()
    "This function is used to open the file ~/.emacs.d/init.el faster."
    (interactive)
    (find-file "~/.emacs.d/settings.org"))

  (defun install.sh ()
    "This function is used to open the my installation file"
    (interactive)
    (find-file "~/Documents/install.sh"))
  (defun open-term ()
    "Opens a terminal in a small window"
    (interactive)
    (select-window (split-window-vertically))
    (shrink-window 15)
    (eshell))

  (defun close-parenths ()
    "Closes the parenthesis of a function."
    (interactive)
    (insert "(  );")
    (backward-char 3))
  (defun move-line-up ()
    "Used to move a line up."
    (interactive)
    (transpose-lines 1)
    (forward-line -2))
  (defun move-line-down ()
    "Used to move line down."
    (interactive)
    (forward-line)
    (transpose-lines 1)
    (forward-line -1))
  (defun eval-and-replace ()
    "Replace the preceding sexp with its value."
    (interactive)
    (backward-kill-sexp)
    (condition-case nil
	(prin1 (eval (read (current-kill 0)))
	       (current-buffer))
      (error (message "Invalid expression")
	     (insert (current-kill 0)))))
  (defun my-insert-function ()
    "Insert a function template using yasnippet."
    (interactive)
    (yas-expand-snippet (yas-lookup-snippet "function") ))

  (defun my-kill-this-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
#+END_SRC
* Appearance
** Neotree
Neotree is a file-explorer
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t
    :config
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
    (setq neo-window-width 27))
#+END_SRC
** Nlinum
Show line numbers
#+BEGIN_SRC emacs-lisp
  (use-package nlinum
    :ensure t
    :config
    (global-nlinum-mode t))
#+END_SRC

** Indent Guide
Display guides according to indentation.
It can be used recursively, but it is too slow.
It is also disabled in htlm mode.
#+BEGIN_SRC emacs-lisp
  (use-package indent-guide
    :ensure t
    :config
    (indent-guide-global-mode t)
    (setq indent-guide-char "|")
    (add-hook 'html-mode-hook 'indent-guide-mode nil)
    (setq indent-guide-recursive nil))
#+END_SRC
** Dashboard
Show a nice homepage when Emacs starts
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook))
#+END_SRC
** Rainbow Delimeters
Use a different color for each delimeter according to depth.
Very usefull for e-lisp
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :config
  (add-hook 'prog-mode-hook
     (lambda ()
     (rainbow-delimiters-mode t))))
#+END_SRC
   
** Highlight Todo 
Highlight TODO,FIXME in code comments
#+BEGIN_SRC emacs-lisp
(use-package hl-todo
  :ensure t
  :init
  (global-hl-todo-mode t))
#+END_SRC
** Rainbow Mode
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :hook (css-mode))
#+END_SRC
* Misc
Set yes-or-no prompts to be just y/n, disable toolbars etc.
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("" . "~/Documents/Backups")))

  (delete-selection-mode 1)
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq frame-title-format (list "%b%* %m, emacs@" (getenv "COMPUTERNAME") ))
  (set-language-environment "UTF-8")
  (toggle-frame-maximized)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (electric-pair-mode t)
  (set-default 'truncate-lines t)
  (add-hook 'prog-mode-hook 'hs-minor-mode)
  (setq org-log-done t)
  (set-face-attribute 'default nil
		      :family "InputMono"
		      :height 105
		      :weight 'normal
		      :width 'normal)
  (global-hl-line-mode)
  (setq default-directory "~/Documents")
  (use-package all-the-icons :ensure t)
#+END_SRC
** Theme
Use the atom-one-dark theme, and the corresponding powerline
#+BEGIN_SRC emacs-lisp
  (use-package atom-one-dark-theme 
    :ensure t
    :init
    (load-theme 'atom-one-dark))
  (use-package powerline
    :ensure t
    :config
    (powerline-center-evil-theme))
  (use-package airline-themes
    :ensure t
    :config
    (load-theme 'airline-doom-one))
#+END_SRC

* Magit 
Magit is a way to use git inside emacs!
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (setq magit-commit-show-diff t))
#+END_SRC
* Yasnippet
Yasnippet is used for snippets
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :init
  (yas-global-mode t))
  ; (add-hook 'term-mode-hook
	    ; (lambda() (setq yas-dont-activate-functions t))))
#+END_SRC
Yasnippet uses TAB to expand, same as company.
This results in them "competing" with each other.
The following code solves this conflict
#+BEGIN_SRC emacs-lisp
  (advice-add 'company-complete-common :before (lambda () (setq my-company-point (point))))
  (advice-add 'company-complete-common :after (lambda ()
						(when (equal my-company-point (point))
						  (yas-expand))))


#+END_SRC
* Helm
Helm is a minibuffer autocompletion tool. It is used for finding files, swapping buffers and entering commands
#+BEGIN_SRC emacs-lisp
(use-package helm :ensure t)
#+END_SRC
* Org Mode
** Main mode
Company Mode blocks tab when expanding org-mode 'snippets' and is not needed, therefore we disable it
#+BEGIN_SRC emacs-lisp
  (setq company-global-modes '(not org-mode eshell))
#+END_SRC
Enable syntax highlighting for src blocks
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC
** Org Agenda
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files '( "~/Documents/Agenda" ))
#+END_SRC
** Org-Bullets
Make asterisks look better
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :init
    (add-hook 'org-mode-hook 'org-bullets-mode))
#+END_SRC
** Org Repls
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages '(
			     (js . t)
			     (python . t)))
#+END_SRC
* Avy
Avy is a way to move fast 
#+BEGIN_SRC emacs-lisp
  (use-package avy :ensure t)
#+END_SRC
* Fun Packages
** Google this
#+BEGIN_SRC emacs-lisp
  (use-package google-this :ensure t)
#+END_SRC
** XKCD mode
#+BEGIN_SRC emacs-lisp
  (use-package xkcd :ensure t)
#+END_SRC

* Evil mode
** Evil
Evil emulates vim inside emacs
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :config
    (evil-mode 1))
#+END_SRC
** Evil Surround
Select text, then press S and a delimeter to surround it with it
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode t))
#+END_SRC
** Evil Numbers
Increase and decrease numbers
#+BEGIN_SRC emacs-lisp
  (use-package evil-numbers :ensure t)
#+END_SRC
** Evil Visual Replace
Allow replacing text in a selected region
#+BEGIN_SRC emacs-lisp
  (use-package evil-visual-replace
    :ensure t
    :config
    (evil-visual-replace-visual-bindings))
#+END_SRC 
* REST Client
#+BEGIN_SRC emacs-lisp
  (use-package restclient :ensure t)
#+END_SRC

#+RESULTS:
: t

* Company Mode
** Main Package
Auto-completion framework
#+BEGIN_SRC emacs-lisp
    (use-package company
      :ensure t
      :config
      (global-company-mode t)
      (setq company-minimum-prefix-length 1)
      (setq company-require-match nil)
      (setq company-idle-delay 0.0))
#+END_SRC

** Company Irony
C++ smart auto-completion
#+BEGIN_SRC emacs-lisp
(use-package company-irony :ensure t)
(add-to-list 'company-backends '(company-irony))
#+END_SRC
** Company Tern
Javascript smart autocompletion
#+BEGIN_SRC emacs-lisp
(use-package company-tern :ensure t)
#+END_SRC
** Company Racer
#+BEGIN_SRC emacs-lisp
  (use-package company-racer
    :ensure t
    :init (add-to-list 'company-backends 'company-racer))

#+END_SRC
* Program Modes
** Flycheck
On the fly syntax checker.
*** Main Package
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t 
  :init 
  (global-flycheck-mode)
  :config
  (setq flycheck-c/c++-clang-executable "/usr/bin/clang-6.0")
  (setq flycheck-gcc-language-standard "c++17")
  (setq irony-eldoc-use-unicode t))
#+END_SRC
*** Flycheck Irony
Flycheck-Irony backend
#+BEGIN_SRC emacs-lisp
(use-package flycheck-irony :ensure t)
#+END_SRC
*** Flycheck Rust
Flycheck-Rust backend
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-rust :ensure t
    :init
    (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
#+END_SRC
** C/C++
*** Indentation
By default, emacs uses the unix style. This is much better.
#+BEGIN_SRC emacs-lisp
  (setq c-default-style "linux"
	c-basic-offset 4)
#+END_SRC
*** Hooks
Use c++-mode when opening arduino files, and use irony-mode for smart autocompletion.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.ino\\'" . c++-mode))

  (add-hook 'c++-mode-hook (lambda () 
	(setq flycheck-clang-language-standard "c++1z")
	(irony-mode)
	(setq flycheck-clang-include-path
		  (list (expand-file-name "~/Documents/Arduino/libraries/")))))
  (add-hook 'c-mode-hook 'irony-mode)
  (add-hook 'objc-mode-hook 'irony-mode)
#+END_SRC
*** Irony Mode
Inteligent c++ autocompletion
#+BEGIN_SRC emacs-lisp
  (use-package irony
    :ensure t
    :hook (irony-eldoc))

  (setq company-clang-executable "/usr/bin/clang-6.0")
  (use-package irony-eldoc :ensure t)
  (use-package company-c-headers 
    :ensure t
    :config 
      (add-to-list 'company-backends 'company-c-headers))

#+END_SRC
** Lua
Basic lua stuff
#+BEGIN_SRC emacs-lisp
  (use-package lua-mode :ensure t)
  (use-package company-lua :ensure t)
#+END_SRC
** Web
*** Web mode
Used for php, django and much more
#+BEGIN_SRC emacs-lisp
(use-package web-mode
   :ensure t
   :init
   (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
   (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
   (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
   (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
   (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
   (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
   (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
   (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
   (defun my-web-mode-hook ()
     "Hooks for Web mode."
     (electric-indent-mode nil)
     (setq web-mode-markup-indent-offset 2))  
   (add-hook 'web-mode-hook  'my-web-mode-hook))
#+END_SRC
*** Emmet mode
Use emmet templates for fast html writing.
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
      :ensure t
      :config
      (add-hook 'sgml-mode-hook 'emmet-mode)
      (add-hook 'web-mode-hook 'emmet-mode)
      (add-hook 'css-mode-hook  'emmet-mode)
      (setq emmet-move-cursor-between-quotes t)
      (setq emmet-preview-default t))
#+END_SRC
*** Javascript
Use tern for intelligent auto-completion, and js2-mode for ide-like features
#+BEGIN_SRC emacs-lisp
(use-package tern :ensure t)
#+END_SRC

Js2 mode for better linting
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :mode "\\.js\\'"
    :init
    (add-hook 'js2-mode-hook '(lambda ()
      (tern-mode)  
      (add-to-list 'company-backends 'company-tern)))
    (setq-default js2-global-externs
		  '("module" "require" "buster"
		    "sinon" "assert" "refute"
		    "setTimeout" "clearTimeout"
		    "setInterval" "clearInterval"
		    "location" "__dirname"
		    "console" "JSON")))
#+END_SRC

Node Js repl
#+BEGIN_SRC emacs-lisp
(use-package nodejs-repl :ensure t)
#+END_SRC

** Python
Elpy is a python IDE for emacs
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :init (elpy-enable))

#+END_SRC
** Rust
#+BEGIN_SRC emacs-lisp
    (use-package rust-mode
      :ensure t)

    ;(use-package cargo
      ;:ensure t
      ;:config 
      ;(add-hook 'rust-mode-hook 'cargo-minor-mode))


    (use-package toml-mode
      :ensure t)
#+END_SRC

** GLSL mode
#+BEGIN_SRC emacs-lisp
  (use-package glsl-mode
    :ensure t
    :mode ("\\.frag\\'" "\\.vert\\'"))
#+END_SRC
* GDB
Basic GDB settings for c++ debugging
#+BEGIN_SRC emacs-lisp
 (setq gdb-enable-debug t)
 (setq gdb-many-windows t)
#+END_SRC
* Keybindings
** Evil mode
Move lines up/down with K,J, expand emmet with tab, toggle neotree with F8
#+BEGIN_SRC emacs-lisp
    (define-key evil-normal-state-map "K" 'move-line-up)
    (define-key evil-normal-state-map "J" 'move-line-down)

    (evil-define-key 'insert emmet-mode-keymap (kbd "<tab>") 'emmet-expand-line)
    (global-set-key [f8] 'neotree-toggle)
#+END_SRC
** Helm
Bind C-e to find-files, M-x to helm-M-x and C-b to buffers-list
#+BEGIN_SRC emacs-lisp
    (define-key evil-insert-state-map (kbd "C-e") 'helm-find-files)
    (define-key evil-normal-state-map (kbd "C-e") 'helm-find-files)
    (define-key evil-emacs-state-map (kbd "C-e") 'helm-find-files)

    (define-key evil-insert-state-map (kbd "M-x") 'helm-M-x)
    (define-key evil-normal-state-map (kbd "M-x") 'helm-M-x)
    (define-key evil-emacs-state-map (kbd "M-x") 'helm-M-x)

    (define-key evil-insert-state-map (kbd "C-b") 'helm-buffers-list)
    (define-key evil-normal-state-map (kbd "C-b") 'helm-buffers-list)
    (define-key evil-emacs-state-map (kbd "C-b") 'helm-buffers-list)
#+END_SRC
** Neotree
Various Neotree bindings
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal neotree-mode-map (kbd "tab") 'neotree-enter)
  (evil-define-key 'normal neotree-mode-map (kbd "r"  ) 'neotree-refresh)
  (evil-define-key 'normal neotree-mode-map (kbd "d"  ) 'neotree-delete-node)
  (evil-define-key 'normal neotree-mode-map (kbd "c"  ) 'neotree-create-node)
  (evil-define-key 'normal neotree-mode-map (kbd "spc") 'neotree-enter)
  (evil-define-key 'normal neotree-mode-map (kbd "l"  ) 'neotree-enter)
  (evil-define-key 'normal neotree-mode-map (kbd "o"  ) 'neotree-change-root)
  (evil-define-key 'normal neotree-mode-map (kbd "q"  ) 'neotree-hide)
  (evil-define-key 'normal neotree-mode-map (kbd "h"  ) 'neotree-hidden-file-toggle)
  (evil-define-key 'normal neotree-mode-map (kbd "<return>") 'neotree-change-root)
#+END_SRC
#+END_SRC
** Evil Leader
   Many, many keybindings
   #+BEGIN_SRC emacs-lisp
     (use-package evil-leader
      :ensure t
      :config
      ;;example usage of leader key
      (global-evil-leader-mode)
      (evil-leader/set-leader "<SPC>")
      (evil-leader/set-key "m"
        '(lambda()
           (interactive)
           (neotree-hide)
           (magit)))
      (evil-leader/set-key
       "g" 'google-this)
      (evil-leader/set-key
       "c" 'comment-line)
      (evil-leader/set-key-for-mode 'csharp-mode
                                    "r" 'omnisharp-rename)
      (evil-leader/set-key-for-mode 'python-mode
                                    "r" 'elpy-multiedit-python-symbol-at-point)
      (evil-leader/set-key
       "|" 'split-window-right)
      (evil-leader/set-key
       "-" 'split-window-below)
      (evil-leader/set-key
       "/" 'comment-region)
      (evil-leader/set-key
       "k" 'delete-window)
      (evil-leader/set-key
       "S" 'avy-goto-char-2)
      (evil-leader/set-key
       "s" 'avy-goto-char)
      (evil-leader/set-key
       "i" 'evil-numbers/inc-at-pt)
      (evil-leader/set-key
       "d" 'evil-numbers/dec-at-pt)
      (evil-leader/set-key
       "f" 'my-insert-function)
      (evil-leader/set-key
       "l" 'flycheck-list-errors)
      (evil-leader/set-key
        "j" 'join-line)
      (evil-leader/set-key-for-mode 'glsl-mode
                                    "h" 'ff-find-other-file)
      (evil-leader/set-key-for-mode 'c++-mode
                                    "h" 'ff-find-other-file)
      (evil-leader/set-key
       "e" 'eval-and-replace)
      (evil-leader/set-key-for-mode 'js2-mode
                                    "e" 'nodejs-repl-send-region)
      (evil-leader/set-key-for-mode 'python-mode
                                    "e" 'elpy-shell-send-region-or-buffer)
      (evil-leader/set-key
       "q" 'server-edit)
      (evil-leader/set-key-for-mode 'csharp-mode
                                    "p" 'maybe-start-omnisharp)
      (evil-leader/set-key
       "x" 'xkcd-rand))
   #+END_SRC
** Refresh buffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f5>") 'revert-buffer)
#+END_SRC
** Kill current buffer with ctrl-k
Allow closing the current buffer with a single keystroke
#+BEGIN_SRC emacs-lisp
  (define-key evil-motion-state-map (kbd "C-w") 'my-kill-this-buffer)
  (define-key evil-normal-state-map (kbd "C-w") 'my-kill-this-buffer)
  (define-key evil-emacs-state-map (kbd "C-w") 'my-kill-this-buffer)
#+END_SRC
** Change window with ctrl-tab
Easier Window navigation
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
	  '(lambda ()
	     (define-key org-mode-map [(control tab)] nil)))
  (global-set-key (kbd "C-<tab>") 'other-window)
#+END_SRC
  
** KeyChord
Quickly tab two keys to execute a function
#+BEGIN_SRC emacs-lisp
  (use-package key-chord
    :ensure t
    :config
    (key-chord-mode 1)
    (key-chord-define elpy-mode-map "gd" 'elpy-goto-definitionk)
    (key-chord-define evil-insert-state-map  "kj" 'evil-normal-state))
#+END_SRC
** Company
Use more familliar keybindings for company
#+BEGIN_SRC emacs-lisp
(define-key evil-insert-state-map (kbd "C-j") 'yas-expand)
    (define-key evil-insert-state-map (kbd "C-SPC") 'company-complete)
    (define-key company-active-map (kbd "C-n") 'company-select-next-or-abort)
    (define-key company-active-map (kbd "C-p") 'company-select-previous-or-abort)
#+END_SRC
** Windmove
Move around windows with meta key + arrows
#+BEGIN_SRC emacs-lisp
  (windmove-default-keybindings 'meta)
#+END_SRC
  
** Magit
#+BEGIN_SRC emacs-lisp
(define-key magit-status-mode-map "k" 'magit-section-backward)
(define-key magit-status-mode-map "j" 'magit-section-forward)
#+END_SRC
